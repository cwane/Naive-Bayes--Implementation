# -*- coding: utf-8 -*-
"""Bank Customer Churn Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A-21AHJPqkK8l1VO1DMIsd_PEglnzYUm
"""

import pandas as pd
Bank_Customer_Churn_data = pd.read_csv('Churn.csv')
Bank_Customer_Churn_data

Bank_Customer_Churn_data.head()

Bank_Customer_Churn_data.drop(columns=['customer_id'], inplace=True)
Bank_Customer_Churn_data

Bank_Customer_Churn_data.head()

import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(20, 20))
Bank_Customer_Churn_data.hist(ax=ax)
plt.show()

import seaborn as sns
fig, axarr = plt.subplots(2, 2, figsize=(20, 12))
sns.countplot(x='country', hue = 'churn',data = Bank_Customer_Churn_data, ax=axarr[0][0])
sns.countplot(x='gender', hue = 'churn',data = Bank_Customer_Churn_data, ax=axarr[0][1])
sns.countplot(x='credit_card', hue = 'churn',data = Bank_Customer_Churn_data, ax=axarr[1][0])
sns.countplot(x='active_member', hue = 'churn',data = Bank_Customer_Churn_data, ax=axarr[1][1]);

sns.pairplot(Bank_Customer_Churn_data)
plt.show()

import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

# Convert the 'churn' column to numeric if it's not already (optional step)
Bank_Customer_Churn_data['churn'] = pd.to_numeric(Bank_Customer_Churn_data['churn'], errors='coerce')

# Assuming Bank_Customer_Churn_data is a DataFrame containing the data
numerical_features = ['credit_score', 'age', 'tenure', 'balance', 'products_number', 'estimated_salary']

# Create the pair plot
g = sns.pairplot(Bank_Customer_Churn_data[numerical_features])

# Use the 'churn' column as the hue in each scatter plot
for i, j in zip(*np.triu_indices_from(g.axes, 1)):
    g.axes[i, j].clear()
    sns.scatterplot(x=Bank_Customer_Churn_data[numerical_features[i]],
                    y=Bank_Customer_Churn_data[numerical_features[j]],
                    hue=Bank_Customer_Churn_data['churn'], ax=g.axes[i, j])
plt.title('Pair plot')
# Display the plot
plt.show()

print(Bank_Customer_Churn_data.columns)

customer_counts = Bank_Customer_Churn_data['churn'].value_counts()

print(customer_counts)

import seaborn as sns
import matplotlib.pyplot as plt

# Assuming Bank_Customer_Churn_data is a DataFrame containing the data
sns.set_style("whitegrid")
ax = sns.countplot(x='churn', data=Bank_Customer_Churn_data)
plt.xlabel('Churn Status')
plt.ylabel('Count of Customers')
plt.title('Count of Customers based on Churn Status (Seaborn Bar Plot)')

# Display count values on top of the bars
for p in ax.patches:
    height = p.get_height()
    ax.annotate(f'{height}', (p.get_x() + p.get_width() / 2, height), ha='center', va='bottom')

# Add a legend for roll numbers 35 and 42
plt.legend(['Roll No. [35, 42]'], loc='upper right')

plt.show()

import matplotlib.pyplot as plt

# Assuming customer_counts is a DataFrame containing the count of customers for each churn status
churn_labels = ['Not Churned', 'Churned']
customer_counts = [7963, 2037]  # Replace with the actual counts

plt.bar(churn_labels, customer_counts)
plt.xlabel('Churn Status')
plt.ylabel('Count of Customers')
plt.title('Count of Customers based on Churn Status (Matplotlib Bar Plot)')

# Display count values on top of the bars
for i, count in enumerate(customer_counts):
    plt.text(i, count + 2, str(count), ha='center', va='bottom')

# Add a legend for roll numbers 35 and 42
plt.legend(['Roll No. [35,42]'], loc='upper right')

plt.show()

import matplotlib.pyplot as plt

# Assuming Bank_Customer_Churn_data is a DataFrame containing the data
churn_labels = ['Not Churned', 'Churned']
customer_counts = Bank_Customer_Churn_data['churn'].value_counts()

plt.pie(customer_counts, labels=churn_labels, autopct='%1.1f%%')
plt.title('Percentage of Customers based on Churn Status (Pie Chart)')
plt.axis('equal')  # Equal aspect ratio ensures that the pie is drawn as a circle.
plt.legend(['Roll No. [35,42]'], loc='upper right')
plt.show()

sns.countplot(x='age', hue = 'churn',data = Bank_Customer_Churn_data, )

sns.countplot(x='products_number', hue = 'churn',data = Bank_Customer_Churn_data)

sns.countplot(x='credit_score', hue = 'churn',data = Bank_Customer_Churn_data)

# Group by 'gender' and calculate the mean of 'churn' to get the churn rate
churn_rate_by_gender = Bank_Customer_Churn_data.groupby('gender')['churn'].mean()

print(churn_rate_by_gender)

churn_rate_by_products_number = Bank_Customer_Churn_data.groupby('products_number')['churn'].mean()

print(churn_rate_by_gender)

churn_rate_by_active_member = Bank_Customer_Churn_data.groupby('active_member')['churn'].mean()

print(churn_rate_by_gender)

# Create a pivot table to calculate the churn rate by 'gender' and 'products_number'
pivot_table_churn_rate = pd.pivot_table(Bank_Customer_Churn_data, values='churn', index='gender', columns='products_number', aggfunc='mean')

print(pivot_table_churn_rate)

# Create a pivot table to calculate the churn rate by 'gender' and 'active_member'
pivot_table_churn_rate = pd.pivot_table(Bank_Customer_Churn_data, values='churn', index='gender', columns='active_member', aggfunc='mean')

print(pivot_table_churn_rate)

import pandas as pd
import matplotlib.pyplot as plt

# Assuming Bank_Customer_Churn_data is a DataFrame containing the data

# Create a pivot table to calculate the churn rate by 'gender' and 'products_number'
pivot_table_churn_rate = pd.pivot_table(Bank_Customer_Churn_data, values='churn', index='gender', columns='products_number', aggfunc='mean')

# Plot the churn rate using horizontal bar chart
ax = pivot_table_churn_rate.plot.barh()
plt.xlabel('Churn Rate')
plt.ylabel('Gender')
plt.title('Churn Rate by Gender and Number of Products')

# Manually create the legends
legend1 = plt.legend(title='Number of Products', fontsize='small')
legend2 = plt.legend(['Roll No. [35,42]'], loc='upper right')

# Add the legends to the plot
ax.add_artist(legend1)
ax.add_artist(legend2)

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Assuming Bank_Customer_Churn_data is a DataFrame containing the data

# Create a pivot table to calculate the churn rate by 'gender' and 'active_member'
pivot_table_churn_rate = pd.pivot_table(Bank_Customer_Churn_data, values='churn', index='gender', columns='active_member', aggfunc='mean')

# Plot the churn rate using horizontal bar chart
ax = pivot_table_churn_rate.plot.barh()
plt.xlabel('Churn Rate')
plt.ylabel('Gender')
plt.title('Churn Rate by Gender and Active Member')

# Create the first legend for 'Roll No. [35,42]'
legend1 = plt.legend(['Roll No. [35,42]'], loc='upper left')

# Create the second legend for 'Active Member'
legend2 = plt.legend(title='Active Member', labels=['Not Active', 'Active'])

# Add the legends to the plot
ax.add_artist(legend1)
ax.add_artist(legend2)

plt.show()

# Discretize the 'age' column into age groups
age_bins = [0, 30, 40, 50, 60, 100]  # Define the age group bins
age_labels = ['<30', '30-39', '40-49', '50-59', '60+']  # Define the labels for the age groups
Bank_Customer_Churn_data['age_group'] = pd.cut(Bank_Customer_Churn_data['age'], bins=age_bins, labels=age_labels)

Bank_Customer_Churn_data

# Create a pivot table to calculate the churn rate by 'gender', 'age_group', and 'products_number'
pivot_table_churn_rate = pd.pivot_table(Bank_Customer_Churn_data, values='churn', index=['gender', 'age_group'], columns='products_number', aggfunc='mean')

# Plot the churn rate using horizontal bar chart
ax = pivot_table_churn_rate.plot.barh()
plt.xlabel('Churn Rate')
plt.ylabel('Gender and Age Group')
plt.title('Churn Rate by Gender, Age Group, and Number of Products')

# Manually create the first legend for 'Number of Products'
legend1 = plt.legend(title='Number of Products', fontsize='small')

# Create a second legend for 'Roll No. [35,42]'
legend2 = plt.legend(['Roll No. [35,42]'], loc='lower right')

# Add both legends to the plot
ax.add_artist(legend1)
ax.add_artist(legend2)

plt.show()

# Create a pivot table to calculate the churn rate by 'gender', 'age_group', 'active_member', and 'products_number'
pivot_table_churn_rate = pd.pivot_table(Bank_Customer_Churn_data, values='churn', index=['gender', 'age_group'], columns='active_member', aggfunc='mean')

# Plot the churn rate using horizontal bar chart
ax = pivot_table_churn_rate.plot.barh()
plt.xlabel('Churn Rate')
plt.ylabel('Gender, Age Group')
plt.title('Churn Rate by Gender, Age Group, Active Member')

# Manually create the first legend for 'Number of Products'
legend1 = plt.legend(title='active members', fontsize='small')

# Create a second legend for 'Roll No. [35,42]'
legend2 = plt.legend(['Roll No. [35,42]'], loc='upper right')

# Add both legends to the plot
ax.add_artist(legend1)
ax.add_artist(legend2)

plt.show()

Bank_Customer_Churn_data.head()

import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Assuming Bank_Customer_Churn_data is a DataFrame containing the data

# Create a LabelEncoder object
label_encoder = LabelEncoder()

# Iterate through each column and encode categorical values
for column in Bank_Customer_Churn_data.columns:
    if Bank_Customer_Churn_data[column].dtype == 'object':
        Bank_Customer_Churn_data[column] = label_encoder.fit_transform(Bank_Customer_Churn_data[column])

# Perform One-Hot Encoding on the 'age_group' column
Bank_Customer_Churn_data = pd.get_dummies(Bank_Customer_Churn_data, columns=['age_group'])

Bank_Customer_Churn_data

Bank_Customer_Churn_data.describe(include='all')

print(Bank_Customer_Churn_data.isnull().sum())

Bank_Customer_Churn_data.info()

Bank_Customer_Churn_data.fillna(Bank_Customer_Churn_data.mean(), inplace=True)

# Compute the correlation matrix
correlation_matrix = Bank_Customer_Churn_data.corr()

# Increase the size of the heatmap
plt.figure(figsize=(12, 10))

# Use a diverging colormap
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm',fmt='.2f',linewidths=0.5, center=0)

plt.title('Correlation matrix Heatmap')
# Display the heatmap
plt.show()

# Select the columns with continuous numeric values
continuous_columns = ['credit_score', 'age', 'tenure', 'balance', 'estimated_salary']

# Set the figure size
plt.figure(figsize=(12, 8))

# Plot histogram for each continuous feature
for column in continuous_columns:
    sns.histplot(data=Bank_Customer_Churn_data, x=column, kde=True, bins=30, label=column)

# Add labels and legend
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Distribution of Features with Continuous Values')
plt.legend()

# Display the plot
plt.show()

# Assuming Bank_Customer_Churn_data is a DataFrame containing the data

# Select the columns with continuous numeric values
continuous_columns = ['credit_score', 'age', 'tenure', 'balance', 'estimated_salary']

# Loop through each continuous feature and create separate plots
for column in continuous_columns:
    plt.figure(figsize=(8, 6))
    sns.histplot(data=Bank_Customer_Churn_data, x=column, kde=True, bins=30)
    # plt.xlabel('Value')
    # plt.ylabel('Frequency')
    plt.title(f'Distribution of {column}')
    plt.show()

class_variable = Bank_Customer_Churn_data['churn']

class_variable

Bank_Customer_Churn_data = Bank_Customer_Churn_data.drop(columns=['churn'])

Bank_Customer_Churn_data

from sklearn.model_selection import train_test_split
# Separate the features (X) and the target (y)
X = Bank_Customer_Churn_data
y = class_variable

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.naive_bayes import GaussianNB

# Instantiate the Gaussian Naive Bayes model
gnb_model = GaussianNB()

# Train the model using the training data
gnb_model.fit(X_train, y_train)

predictions = gnb_model.predict(X_test.iloc[:10])
print("Predictions:", predictions)
print("Ground Truth:", y_test.iloc[:10].values)

# Print the prediction probabilities for the first 10 samples in the test data
prediction_probabilities = gnb_model.predict_proba(X_test.iloc[:10])
print("Prediction Probabilities:")
print(prediction_probabilities)

from sklearn.metrics import confusion_matrix

# Obtain predictions for the test data
y_pred = gnb_model.predict(X_test)

# Create the confusion matrix
cm = confusion_matrix(y_test, y_pred)

# Define class labels for visualization
class_labels = ['Not Churned', 'Churned']

# Plot the confusion matrix as a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_labels, yticklabels=class_labels)
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()

from sklearn.metrics import classification_report

# Print the classification report
report = classification_report(y_test, y_pred)
print("Classification Report for Gaussian Naive Bayes:")
print(report)

from sklearn.naive_bayes import CategoricalNB
from sklearn.preprocessing import KBinsDiscretizer

equal_width_discretizer = KBinsDiscretizer(n_bins=5, encode='ordinal', strategy='uniform')
X_discretized_equal_width = pd.DataFrame(equal_width_discretizer.fit_transform(X), columns=X.columns)

X_discretized_equal_width.head()

X_discretized_equal_width['age'].head()

X_train, X_test, y_train, y_test = train_test_split(X_discretized_equal_width, y, test_size=0.2, random_state=42)

# Instantiate a Categorical Naive Bayes model
cnb_model = CategoricalNB()

# Train the model using the training data (discretized features)
cnb_model.fit(X_train, y_train)

# Perform prediction on the first 10 samples in the test data (discretized features) and compare with ground truth
predictions_cnb = cnb_model.predict(X_test[:10])
print("Predictions using Categorical NB:", predictions_cnb)
print("Ground Truth:", y_test.iloc[:10].values)

# Print the prediction probabilities for the first 10 samples in the test data (discretized features)
prediction_probabilities_cnb = cnb_model.predict_proba(X_test[:10])
print("Prediction Probabilities using Categorical NB:")
print(prediction_probabilities_cnb)

# Obtain predictions for the test data
y_pred = cnb_model.predict(X_test)

# Create the confusion matrix
cm = confusion_matrix(y_test, y_pred)

# Define class labels for visualization
class_labels = ['Not Churned', 'Churned']

# Plot the confusion matrix as a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=class_labels, yticklabels=class_labels)
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix for categorical NB')
plt.show()

# Print the classification report
report = classification_report(y_test, y_pred)
print("Classification Report for Categorical Naive Bayes:")
print(report)

from sklearn.metrics import accuracy_score
# Evaluate accuracy for Gaussian Naive Bayes model
gnb_predictions = gnb_model.predict(X_test)
gnb_accuracy = accuracy_score(y_test, gnb_predictions)
print("Accuracy for Gaussian NB:", gnb_accuracy)

# Evaluate accuracy for Categorical Naive Bayes model (with discretized features)
cnb_predictions = cnb_model.predict(X_test)
cnb_accuracy = accuracy_score(y_test, cnb_predictions)
print("Accuracy for Categorical NB (with discretized features):", cnb_accuracy)